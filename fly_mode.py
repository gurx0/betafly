import serial
import struct
import time

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–ª–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
ser = serial.Serial('COM8', 115200, timeout=2)  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π COM-–ø–æ—Ä—Ç

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MSP-–ø–∞–∫–µ—Ç–∞
def checksum(data):
    return sum(data) & 0xFF

# –û—Ç–ø—Ä–∞–≤–∫–∞ MSP-–∫–æ–º–∞–Ω–¥—ã
def send_msp(command, data=[]):
    payload = struct.pack(f'<{len(data)}B', *data) if data else b''
    size = len(payload)
    chk = checksum([size, command] + list(payload))
    packet = b'$M<' + struct.pack('<B', size) + struct.pack('<B', command) + payload + struct.pack('<B', chk)
    ser.write(packet)

# –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
def read_msp_response():
    header = ser.read(3)
    if header != b'$M>':
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ MSP: {header}")
        return None, None
    size_byte = ser.read(1)
    if not size_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä")
        return None, None
    size = ord(size_byte)
    code_byte = ser.read(1)
    if not code_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–¥")
        return None, None
    code = ord(code_byte)
    data = ser.read(size)
    if len(data) != size:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {size} –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(data)}")
        return None, None
    checksum_byte = ser.read(1)
    if not checksum_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É")
        return None, None
    received_checksum = ord(checksum_byte)
    calculated_checksum = checksum([size, code] + list(data))
    if received_checksum != calculated_checksum:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {calculated_checksum}, –ø–æ–ª—É—á–µ–Ω–æ {received_checksum}")
        return None, None
    return code, data

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª–µ—Ç–∞ (MSP_STATUS)
def get_flight_mode():
    send_msp(101)  # MSP_STATUS
    time.sleep(0.1)
    code, data = read_msp_response()
    if code != 101 or data is None:
        print("[!] –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
    if len(data) < 11:
        print(f"[Error] –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 11 –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(data)}")
        return None

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞: cycleTime (uint16), i2cError (uint16), sensor (uint16), flag (uint32), globalConf (uint8)
    cycle_time, i2c_error, sensor, flag, global_conf = struct.unpack('<HHHIb', data[:11])
    modes = []

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–ª–∞–≥–æ–≤ —Ä–µ–∂–∏–º–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ Betaflight)
    if flag & (1 << 0):
        modes.append("ARM")
    if flag & (1 << 1):
        modes.append("ANGLE")
    if flag & (1 << 2):
        modes.append("HORIZON")
    if flag & (1 << 3):
        modes.append("BARO")
    if flag & (1 << 4):
        modes.append("MAG")
    if flag & (1 << 7):
        modes.append("HEADFREE")
    if flag & (1 << 10):
        modes.append("GPS_HOME")
    if flag & (1 << 11):
        modes.append("GPS_HOLD")

    print(f"[üì°] –†–µ–∂–∏–º—ã –ø–æ–ª–µ—Ç–∞: {', '.join(modes) if modes else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤'}")
    print(f"[üìä] –§–ª–∞–≥–∏: {bin(flag)}")
    return modes

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    get_flight_mode()
finally:
    ser.close()