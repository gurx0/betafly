import serial
import struct
import time

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–µ—Ç–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
ser = serial.Serial('COM8', 115200, timeout=2)  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π COM-–ø–æ—Ä—Ç

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MSP-–ø–∞–∫–µ—Ç–∞
def checksum(data):
    return sum(data) & 0xFF

# –û—Ç–ø—Ä–∞–≤–∫–∞ MSP-–∫–æ–º–∞–Ω–¥—ã
def send_msp(command, data=[]):
    payload = struct.pack(f'<{len(data)}B', *data) if data else b''
    size = len(payload)
    chk = checksum([size, command] + list(payload))
    packet = b'$M<' + struct.pack('<B', size) + struct.pack('<B', command) + payload + struct.pack('<B', chk)
    ser.write(packet)

# –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
def read_msp_response():
    header = ser.read(3)
    if header != b'$M>':
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ MSP: {header}")
        return None, None
    size_byte = ser.read(1)
    if not size_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä")
        return None, None
    size = ord(size_byte)
    code_byte = ser.read(1)
    if not code_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–¥")
        return None, None
    code = ord(code_byte)
    data = ser.read(size)
    if len(data) != size:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {size} –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(data)}")
        return None, None
    checksum_byte = ser.read(1)
    if not checksum_byte:
        print("[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É")
        return None, None
    received_checksum = ord(checksum_byte)
    calculated_checksum = checksum([size, code] + list(data))
    if received_checksum != calculated_checksum:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {calculated_checksum}, –ø–æ–ª—É—á–µ–Ω–æ {received_checksum}")
        return None, None
    return code, data

# –ê—Ä–º–∏–Ω–≥/–¥–∏–∑–∞—Ä–º–∏–Ω–≥ –¥—Ä–æ–Ω–∞ (MSP_SET_RAW_RC)
def set_arm(arm=True):
    # –ö–∞–Ω–∞–ª—ã: roll, pitch, yaw, throttle, aux1 (arming), aux2-4
    roll = 1500  # –¶–µ–Ω—Ç—Ä (–Ω–µ–π—Ç—Ä–∞–ª—å)
    pitch = 1500
    yaw = 1500
    throttle = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–æ—Ç—Ç–ª
    aux1 = 2000 if arm else 1000  # AUX1: 2000 –¥–ª—è –∞—Ä–º–∏–Ω–≥–∞, 1000 –¥–ª—è –¥–∏–∑–∞—Ä–º–∏–Ω–≥–∞
    aux2 = 1000
    aux3 = 1000
    aux4 = 1000

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (8 –∫–∞–Ω–∞–ª–æ–≤, 16 –±–∏—Ç –∫–∞–∂–¥—ã–π)
    channels = [roll, pitch, yaw, throttle, aux1, aux2, aux3, aux4]
    data = []
    for ch in channels:
        data.extend([ch & 0xFF, (ch >> 8) & 0xFF])  # –ú–ª–∞–¥—à–∏–π –∏ —Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç

    send_msp(200, data)  # MSP_SET_RAW_RC
    time.sleep(0.1)
    code, _ = read_msp_response()
    if code != 200:
        print(f"[!] –û—à–∏–±–∫–∞ {'–∞—Ä–º–∏–Ω–≥–∞' if arm else '–¥–∏–∑–∞—Ä–º–∏–Ω–≥–∞'}")
        return False
    print(f"[‚úî] –î—Ä–æ–Ω {'–∞—Ä–º–∏—Ä–æ–≤–∞–Ω' if arm else '–¥–∏–∑–∞—Ä–º–∏—Ä–æ–≤–∞–Ω'}")
    return True

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ—Ç—Ç–ª–∞
def set_throttle(throttle):
    if not 1000 <= throttle <= 2000:
        print("[!] –¢—Ä–æ—Ç—Ç–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-2000")
        return False

    # –ö–∞–Ω–∞–ª—ã: roll, pitch, yaw, throttle, aux1-4
    roll = 1500
    pitch = 1500
    yaw = 1500
    aux1 = 2000  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥—Ä–æ–Ω –∞—Ä–º–∏—Ä–æ–≤–∞–Ω
    aux2 = 1000
    aux3 = 1000
    aux4 = 1000

    channels = [roll, pitch, yaw, throttle, aux1, aux2, aux3, aux4]
    data = []
    for ch in channels:
        data.extend([ch & 0xFF, (ch >> 8) & 0xFF])

    send_msp(200, data)  # MSP_SET_RAW_RC
    time.sleep(0.1)
    code, _ = read_msp_response()
    if code != 200:
        print("[!] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–æ—Ç—Ç–ª–∞")
        return False
    print(f"[‚úî] –¢—Ä–æ—Ç—Ç–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {throttle}")
    return True

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª–µ—Ç–∞ (MSP_STATUS)
def get_flight_mode():
    send_msp(101)  # MSP_STATUS
    time.sleep(0.1)
    code, data = read_msp_response()
    if code != 101 or data is None:
        print("[!] –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        return None

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ MSP_STATUS: cycleTime (uint16), i2cError (uint16), sensor (uint16), flag (uint32), globalConf (uint8)
    if len(data) < 11:
        print(f"[Error] –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 11 –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(data)}")
        return None

    cycle_time, i2c_error, sensor, flag, global_conf = struct.unpack('<HHHIb', data[:11])
    modes = []

    # –§–ª–∞–≥–∏ —Ä–µ–∂–∏–º–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è Betaflight)
    if flag & (1 << 0):
        modes.append("ARM")
    if flag & (1 << 1):
        modes.append("ANGLE")
    if flag & (1 << 2):
        modes.append("HORIZON")
    if flag & (1 << 3):
        modes.append("BARO")
    if flag & (1 << 4):
        modes.append("MAG")
    if flag & (1 << 7):
        modes.append("HEADFREE")
    if flag & (1 << 10):
        modes.append("GPS_HOME")
    if flag & (1 << 11):
        modes.append("GPS_HOLD")

    print(f"[üì°] –†–µ–∂–∏–º—ã –ø–æ–ª–µ—Ç–∞: {', '.join(modes) if modes else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤'}")
    print(f"[üìä] –§–ª–∞–≥–∏: {bin(flag)}")
    return modes

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∞—Ä–æ–º–µ—Ç—Ä–∞ (MSP_ALTITUDE)
def get_baro_altitude():
    send_msp(109)  # MSP_ALTITUDE
    time.sleep(0.1)
    code, data = read_msp_response()
    if code != 109 or data is None:
        print("[!] –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        return

    print(f"[Debug] Raw data: {data}, Length: {len(data)}")
    if len(data) != 6:
        print(f"[Error] –û–∂–∏–¥–∞–ª–æ—Å—å 6 –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞–π—Ç")
        return

    alt, var = struct.unpack('<ih', data)
    print(f"[üì°] –í—ã—Å–æ—Ç–∞: {alt / 100.0} –º")
    print(f"[üìä] –î–∏—Å–ø–µ—Ä—Å–∏—è: {var}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    get_flight_mode()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É
    get_baro_altitude()

    # –ê—Ä–º–∏—Ä—É–µ–º –¥—Ä–æ–Ω
    if set_arm(True):
        time.sleep(1)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–æ—Ç—Ç–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1200)
        set_throttle(1200)
        time.sleep(2)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–æ—Ç—Ç–ª –Ω–∞ –º–∏–Ω–∏–º—É–º
        set_throttle(1000)
        time.sleep(1)
        # –î–∏–∑–∞—Ä–º–∏—Ä—É–µ–º
        set_arm(False)

finally:
    ser.close()